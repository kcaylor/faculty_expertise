# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Unit']

# %% ../nbs/00_core.ipynb 2
from pathlib import Path
import pandas as pd
from .my_enrichment import gather_research_links, get_corpus_from_urls, summarize_faculty_expertise


# %% ../nbs/00_core.ipynb 4
from .my_scrapers import get_scraper

class Unit:
    "Encapsulates scraping and enrichment for a given academic unit"
    def __init__(self, name, html_file, base_url=None, scraper_func=None, metadata=None):
        self.name = name
        self.html_file = Path(html_file)
        self.base_url = base_url
        self.scraper_func = scraper_func or get_scraper(name)
        self.metadata = metadata or {}
        self.df = None

    def scrape(self):
        "Run the unit's scraper function and return a DataFrame"
        self.df = self.scraper_func(self.html_file, self.base_url)
        self.df["Unit"] = self.name
        return self.df

    def enrich_with(self, enrich_func, source_field="Website", target_field="Expertise"):
        "Apply an enrichment function to a field (e.g., summarizing expertise from faculty websites)"
        if self.df is None:
            raise ValueError("You must call scrape() first.")
        self.df[target_field] = self.df[source_field].apply(
            lambda url: enrich_func(url) if pd.notnull(url) else None
        )

